import{d as q,k as T,o as h,c as W,_ as C,a as N,e as P,g as j,h as I,w as A,i as E,j as L}from"./index-86ce8511.js";const V={id:"canvas"},$=q({__name:"CusTree",setup(g){let s;const c=window.devicePixelRatio*2;let n,k=window.innerWidth,r=window.innerHeight;const M=()=>{s=document.getElementById("canvas"),n=s.getContext("2d"),k=s.clientWidth,r=s.clientHeight,s.style.width=k+"px",s.style.height=r+"px",s.width=Math.round(k*c),s.height=Math.round(r*c),n.scale(c,c),n.imageSmoothingEnabled=!0,n.lineCap="round",n.lineJoin="round",n.translate(.5,.5)};var b=function(a,t,p,i,m,y){var w="rgb(96,50,25)";m--<=2&&(w="rgb(0,150,0)");const _=Math.cos(i),x=Math.sin(i);n.strokeStyle=w,n.shadowColor=w,n.shadowBlur=1;function u(f){u.startTime=u.startTime||f;let e=(f-u.startTime)/8/p;e>=1&&(e=1);const l=a+p*e*_,d=t+p*e*x;n.beginPath(),n.moveTo(a,t),n.lineWidth=y,n.lineTo(l,d),n.stroke(),e<1?requestAnimationFrame(u):Y()}requestAnimationFrame(u);function Y(f,e){if(m)for(var l=0;l<2;l++){let d=i+o(-Math.PI/4,0);l%2==0&&(d=i+o(0,Math.PI/4));const B=p*o(.7,.9),F=y*.7,v=o(.7,1),H=a+p*v*_,S=t+p*v*x;b(H,S,B,d,m,F)}}};function o(a,t){return Math.random()*(t-a)+a}function X(a){for(;a>0;){const t=o(-800,800),p=o(0,500);console.log(t,p),b(k/2,r,o(70,120),-Math.PI/2,12,25),a--}}return T(()=>{M(),X(1)}),(a,t)=>(h(),W("canvas",V))}});const J=C($,[["__scopeId","data-v-c6ff9c39"]]),R={class:"markdown-body"},z=P("h1",{id:"%E7%94%BB%E6%A0%91",tabindex:"-1"},"画树",-1),D=j(`<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>canvas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>
</code></pre><pre class="language-css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#canvas</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>
  <span class="token constant">H</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token constant">W</span> <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token constant">H</span> <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token constant">W</span> <span class="token operator">*</span> dpr<span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token constant">H</span> <span class="token operator">*</span> dpr<span class="token punctuation">)</span><span class="token punctuation">;</span>

ctx<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>dpr<span class="token punctuation">,</span> dpr<span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span>imageSmoothingEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span>lineCap <span class="token operator">=</span> <span class="token string">&quot;round&quot;</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span>lineJoin <span class="token operator">=</span> <span class="token string">&quot;round&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 开启抗锯齿</span>
ctx<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> maxBranch <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 一根树干上最大有几个分叉</span>

<span class="token comment">/**
 * @description 递归画树枝
 * @param {Number} startX 该条树枝起始x坐标
 * @param {Number} startY 该条树枝起始y标
 * @param {Number} length 该条树枝长度
 * @param {Number} angle 该条树枝旋转角度
 * @param {Number} depth 该条树枝是第几层
 * @param {Number} branchWidth 该条树枝宽度
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">startX<span class="token punctuation">,</span> startY<span class="token punctuation">,</span> length<span class="token punctuation">,</span> angle<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> branchWidth</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">&quot;rgb(96,50,25)&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 树干树枝颜色</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>depth<span class="token operator">--</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    color <span class="token operator">=</span> <span class="token string">&quot;rgb(0,150,0)&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> angelX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> angelY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> color<span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>shadowColor <span class="token operator">=</span> color<span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span>shadowBlur <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">drawNowFram</span><span class="token punctuation">(</span><span class="token parameter">timap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 刻画当前帧</span>
    drawNowFram<span class="token punctuation">.</span>startTime <span class="token operator">=</span> drawNowFram<span class="token punctuation">.</span>startTime <span class="token operator">||</span> timap<span class="token punctuation">;</span>
    <span class="token keyword">let</span> jin <span class="token operator">=</span> <span class="token punctuation">(</span>timap <span class="token operator">-</span> drawNowFram<span class="token punctuation">.</span>startTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">/</span> length<span class="token punctuation">;</span> <span class="token comment">// 每8ms长度多1px</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>jin <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      jin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> frameX <span class="token operator">=</span> startX <span class="token operator">+</span> length <span class="token operator">*</span> jin <span class="token operator">*</span> angelX<span class="token punctuation">;</span>
    <span class="token keyword">const</span> frameY <span class="token operator">=</span> startY <span class="token operator">+</span> length <span class="token operator">*</span> jin <span class="token operator">*</span> angelY<span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>startX<span class="token punctuation">,</span> startY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> branchWidth<span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>frameX<span class="token punctuation">,</span> frameY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>jin <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>drawNowFram<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">drawNext</span><span class="token punctuation">(</span>frameX<span class="token punctuation">,</span> frameY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>drawNowFram<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">drawNext</span><span class="token punctuation">(</span><span class="token parameter">endX<span class="token punctuation">,</span> endY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 画衍生树枝</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depth<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 左右两根树枝</span>
      <span class="token keyword">let</span> newAngle <span class="token operator">=</span> angle <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左偏转</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newAngle <span class="token operator">=</span> angle <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token comment">// 右偏转</span>
      <span class="token keyword">const</span> newLength <span class="token operator">=</span> length <span class="token operator">*</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新长度缩减</span>
      <span class="token keyword">const</span> newBranchWidth <span class="token operator">=</span> branchWidth <span class="token operator">*</span> <span class="token number">0.7</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> ran <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> newStartX <span class="token operator">=</span> startX <span class="token operator">+</span> length <span class="token operator">*</span> ran <span class="token operator">*</span> angelX<span class="token punctuation">;</span>
      <span class="token keyword">const</span> newStartY <span class="token operator">=</span> startY <span class="token operator">+</span> length <span class="token operator">*</span> ran <span class="token operator">*</span> angelY<span class="token punctuation">;</span>
      <span class="token comment">// const newStartX = endX;</span>
      <span class="token comment">// const newStartY = endY;</span>
      <span class="token function">draw</span><span class="token punctuation">(</span>newStartX<span class="token punctuation">,</span> newStartY<span class="token punctuation">,</span> newLength<span class="token punctuation">,</span> newAngle<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> newBranchWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从该树枝末端重新生长新的树枝</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">// 返回随机数</span>

<span class="token keyword">function</span> <span class="token function">drawForest</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> disW <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      disH <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>disW<span class="token punctuation">,</span> disH<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token constant">W</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> disW<span class="token punctuation">,</span> <span class="token constant">H</span> <span class="token operator">-</span> disH<span class="token punctuation">,</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一根垂直的树干</span>
    num<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// draw(W / 2, H - 100, 120, -Math.PI / 2, 12, 25); // 第一根垂直的树干</span>
  <span class="token function">drawForest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>`,3),G=q({__name:"画树",setup(g,{expose:s}){return s({frontmatter:{},excerpt:void 0}),(c,n)=>(h(),W("div",R,[z,N(J),D]))}}),O={__name:"index",setup(g){return(s,c)=>{const n=L;return h(),I(n,null,{default:A(()=>[N(E(G),{id:"markdown"})]),_:1})}}};export{O as default};
