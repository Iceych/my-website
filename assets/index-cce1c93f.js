import{d as o,o as a,c as e,f as c,g as l,w as u,b as k,h as r,i}from"./index-9362ae99.js";const m={class:"markdown-body"},d=o({__name:"常用方法合集",setup(p,{expose:s}){return s({frontmatter:{},excerpt:void 0}),(t,n)=>(a(),e("div",m,n[0]||(n[0]=[c(`<h1 id="%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%90%88%E9%9B%86" tabindex="-1">常用方法合集</h1><ul><li><ol><li><a href="#is">is系列</a></li></ol></li><li><ol start="2"><li><a href="#url">提取url参数</a></li></ol></li><li><ol start="3"><li><a href="#uuid">生成随机uuid</a></li></ol></li><li><ol start="4"><li><a href="#">数组中随机取一项</a></li></ol></li><li><ol start="5"><li><a href="#-1">数组乱序（洗牌算法）</a></li></ol></li><li><ol start="6"><li><a href="#-1">睡眠函数</a></li></ol></li><li><ol start="7"><li><a href="#Promise">永不失败的Promise</a></li></ol></li><li><ol start="8"><li><a href="#minmax">获取[min,max)之间的随机数</a></li></ol></li><li><ol start="9"><li><a href="#minmax-1">获取[min,max]之间的随机整数</a></li></ol></li><li><ol start="10"><li><a href="#-1">检查手机号是否正确</a></li></ol></li><li><ol start="11"><li><a href="#-1">获取字符串长度，区分中文字符</a></li></ol></li><li><ol start="12"><li><a href="#-1">去除字符串前后空格，包括零宽字符</a></li></ol></li><li><ol start="13"><li><a href="#-1">千分位分隔符</a></li></ol></li><li><ol start="14"><li><a href="#startend">生成一个[start,end)区间连续的整数数组</a></li></ol></li><li><ol start="15"><li><a href="#key-value">将 对象数组 结构 转为 key-value结构</a></li></ol></li><li><ol start="16"><li><a href="#cookie">读取cookie</a></li></ol></li><li><ol start="17"><li><a href="#cookie-1">删除cookie</a></li></ol></li><li><ol start="18"><li><a href="#-1">单文件上传</a></li></ol></li><li><ol start="19"><li><a href="#blob">文件下载(blob)</a></li></ol></li><li><ol start="20"><li><a href="#blob-1">检查blob数据是否有效</a></li></ol></li></ul><h2 id="1.-is%E7%B3%BB%E5%88%97" tabindex="-1">1. <a name="is"></a>is系列</h2><pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isArr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Array]&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Function]&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isObj</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isNum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Number]&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isStr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object String]&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isBool</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Boolean]&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isDef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&#39;[object Undefined]&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isNull</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Null]&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isNaN</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">+</span>value <span class="token operator">!==</span> <span class="token operator">+</span>value<span class="token punctuation">;</span>
<span class="token comment">// 是否为空</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">val</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token function">isDef</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isNull</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> val <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

</code></pre><h2 id="2.-%E6%8F%90%E5%8F%96url%E5%8F%82%E6%95%B0" tabindex="-1">2. <a name="url"></a>提取url参数</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @param {string} name 需要获取的参数名称
 * @desc 获取路径上参数
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;(^|&amp;)&#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;=([^&amp;]*)(&amp;|$)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> r <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="3.-%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BAuuid" tabindex="-1">3. <a name="uuid"></a>生成随机uuid</h2><pre class="language-js"><code class="language-js"><span class="token comment">/** 生成唯一随机uid */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[xy]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// eslint-disable-next-line no-bitwise</span>
    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// eslint-disable-next-line no-bitwise</span>
    <span class="token keyword">const</span> v <span class="token operator">=</span> c <span class="token operator">===</span> <span class="token string">&quot;x&quot;</span> <span class="token operator">?</span> r <span class="token operator">:</span> <span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">0x3</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x8</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="4.-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%9A%8F%E6%9C%BA%E5%8F%96%E4%B8%80%E9%A1%B9" tabindex="-1">4. <a name=""></a>数组中随机取一项</h2><pre class="language-js"><code class="language-js"><span class="token comment">/** 数组中随机取一项 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getRandomItemByArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token operator">?.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="5.-%E6%95%B0%E7%BB%84%E4%B9%B1%E5%BA%8F%EF%BC%88%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95%EF%BC%89" tabindex="-1">5. <a name="-1"></a>数组乱序（洗牌算法）</h2><pre class="language-js"><code class="language-js"><span class="token comment">/** 数组乱序 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">shuffle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> j <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="6.-%E7%9D%A1%E7%9C%A0%E5%87%BD%E6%95%B0" tabindex="-1">6. <a name="-1"></a>睡眠函数</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 睡眠函数
 * @param {Number} time
 * @returns
 * await sleep(2)
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">time</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNum</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">sleeph =&gt; 参数必须为数字</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="7.-%E6%B0%B8%E4%B8%8D%E5%A4%B1%E8%B4%A5%E7%9A%84promise" tabindex="-1">7. <a name="Promise"></a>永不失败的Promise</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 永不失败的Promise
 * @param {Any} task 原任务
 * @param {Any} defaultVal 如果失败了返回的默认值
 * @returns {Promise}
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">neverFail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">task</span><span class="token operator">:</span> any<span class="token punctuation">,</span> defaultVal <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>data <span class="token operator">||</span> defaultVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>defaultVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="8.-%E8%8E%B7%E5%8F%96%5Bmin%2Cmax)%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0" tabindex="-1">8. <a name="minmax"></a>获取[min,max)之间的随机数</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 获取[min,max)之间的随机数
 * @param {Number} min
 * @param {Number} max
 * @returns {number}
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">min</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> minNum <span class="token operator">=</span> min<span class="token punctuation">,</span>
    maxNum <span class="token operator">=</span> max<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>minNum <span class="token operator">&gt;</span> maxNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>minNum<span class="token punctuation">,</span> maxNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>maxNum<span class="token punctuation">,</span> minNum<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>maxNum <span class="token operator">-</span> minNum<span class="token punctuation">)</span> <span class="token operator">+</span> minNum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="9.-%E8%8E%B7%E5%8F%96%5Bmin%2Cmax%5D%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0" tabindex="-1">9. <a name="minmax-1"></a>获取[min,max]之间的随机整数</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 获取[min,max]之间的随机整数
 * @param {Number} min
 * @param {Number} max
 * @returns {number}
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">randomInt</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">min</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> minNum <span class="token operator">=</span> min<span class="token punctuation">,</span>
    maxNum <span class="token operator">=</span> max<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>minNum <span class="token operator">&gt;</span> maxNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>minNum<span class="token punctuation">,</span> maxNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>maxNum<span class="token punctuation">,</span> minNum<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>minNum<span class="token punctuation">,</span> maxNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="10.-%E6%A3%80%E6%9F%A5%E6%89%8B%E6%9C%BA%E5%8F%B7%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE" tabindex="-1">10. <a name="-1"></a>检查手机号是否正确</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 检查手机号是否正确
 * @param {String} phone 手机号
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">checkPhone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">phone</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="11.-%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%EF%BC%8C%E5%8C%BA%E5%88%86%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6" tabindex="-1">11. <a name="-1"></a>获取字符串长度，区分中文字符</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 字符串长度，区分中文字符
 * @param {String} str 字符串
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> code <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">)</span> len <span class="token operator">+=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
    <span class="token comment">// else if (code &gt; 65535) len += 2;</span>
    <span class="token keyword">else</span> len <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">&gt;</span> <span class="token number">65535</span><span class="token punctuation">)</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="12.-%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E5%90%8E%E7%A9%BA%E6%A0%BC%EF%BC%8C%E5%8C%85%E6%8B%AC%E9%9B%B6%E5%AE%BD%E5%AD%97%E7%AC%A6" tabindex="-1">12. <a name="-1"></a>去除字符串前后空格，包括零宽字符</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 去除字符串前后空格，包括零宽字符
 * @param {*} str
 * @returns
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">cusTrim</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token operator">?.</span>trim<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\u200B-\\u200D]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> str <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="13.-%E5%8D%83%E5%88%86%E4%BD%8D%E5%88%86%E9%9A%94%E7%AC%A6" tabindex="-1">13. <a name="-1"></a>千分位分隔符</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 为数字添加千分位分隔符
 * @param num 数字
 * @returns
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> formatDigit <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  num <span class="token operator">=</span> num<span class="token operator">?.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> reg <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d)(?=(\\d{3})+\\.)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span> <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d)(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;$1,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="14.-%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%5Bstart%2Cend)%E5%8C%BA%E9%97%B4%E8%BF%9E%E7%BB%AD%E7%9A%84%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84" tabindex="-1">14. <a name="startend"></a>生成一个[start,end)区间连续的整数数组</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 生成一个[start,end)区间连续的整数数组
 * @param start
 * @param end
 * @returns
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">range</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">start</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token literal-property property">i</span><span class="token operator">:</span> number <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="15.-%E5%B0%86-%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84-%E7%BB%93%E6%9E%84-%E8%BD%AC%E4%B8%BA-key-value%E7%BB%93%E6%9E%84" tabindex="-1">15. <a name="key-value"></a>将 对象数组 结构 转为 key-value结构</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 将 对象数组 结构 转为 key-value结构
 * @param {Array} arr 原数组
 * @param {String} key 作为key的字段
 * @returns {Object}
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">arrayToMap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">arrayToMap =&gt; 必须是数组</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      pre<span class="token punctuation">[</span>cur<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="16.-%E8%AF%BB%E5%8F%96cookie" tabindex="-1">16. <a name="cookie"></a>读取cookie</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 读取cookie
 * @param name 关键字
 * @returns
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;(^| )&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;=([^;]*)(;|$)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> result <span class="token operator">?</span> result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="17.-%E5%88%A0%E9%99%A4cookie" tabindex="-1">17. <a name="cookie-1"></a>删除cookie</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 删除cookie
 * @param name cookie关键字
 * @param domain cookie域名
 * @param path cookie地址
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">delCookie</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> domain<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span> path<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// @ts-ignore</span>
  document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
    domain <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">;domain=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>domain<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">;path=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><h2 id="18.-%E5%8D%95%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0" tabindex="-1">18. <a name="-1"></a>单文件上传</h2><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createInput</span><span class="token punctuation">(</span>accept <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  input<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">;</span>

  accept <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>accept <span class="token operator">=</span> accept<span class="token punctuation">)</span><span class="token punctuation">;</span>
  multiple <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>multiple <span class="token operator">=</span> <span class="token string">&quot;multiple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> input<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * @description 单文件选择
 * @param accept 文件类型
 * @param size 文件大小
 * @returns
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">selectFile</span><span class="token punctuation">(</span>accept <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">createInput</span><span class="token punctuation">(</span>accept<span class="token punctuation">)</span><span class="token punctuation">;</span>
    input<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">onchange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> file <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token operator">?.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">&gt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">上传文件不能超过</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">M</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    input<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="19.-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD(blob)" tabindex="-1">19. <a name="blob"></a>文件下载(blob)</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 文件下载
 * @param res blob响应数据
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// type: &#39;application/xlsx;charset=utf-8&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> fileName <span class="token operator">=</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;content-disposition&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  fileName <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  link<span class="token punctuation">.</span>download <span class="token operator">=</span> fileName<span class="token punctuation">;</span> <span class="token comment">// 这里是后端返回的文件名称</span>
  link<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">;</span>
  link<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 触发点击</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
  link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 释放URL对象</span>
  <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 然后移除</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="20.-%E6%A3%80%E6%9F%A5blob%E6%95%B0%E6%8D%AE%E6%98%AF%E5%90%A6%E6%9C%89%E6%95%88" tabindex="-1">20. <a name="blob-1"></a>检查blob数据是否有效</h2><pre class="language-js"><code class="language-js"><span class="token comment">/** 检查blob数据是否有效 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">checkBlob</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> firstError <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result <span class="token operator">+</span> <span class="token string">&quot;&quot;</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>firstError <span class="token operator">||</span> <span class="token string">&quot;下载失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;下载失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="21.%E4%BB%8E%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E6%88%AA%E5%8F%96%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2" tabindex="-1">21.从指定位置截取指定长度的字符串</h2><pre class="language-js"><code class="language-js"><span class="token comment">/**
 * @description 从指定位置截取指定长度的字符串
 * @param str
 * @param count
 * @param start
 * @returns
 */</span>
<span class="token keyword">function</span> <span class="token function">sliceStr</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> String<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> code <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span>
      char <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">)</span> len <span class="token operator">+=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
    <span class="token comment">// else if (code &gt; 65535) len += 2;</span>
    <span class="token keyword">else</span> len <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    res <span class="token operator">+=</span> char<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">&gt;</span> <span class="token number">65535</span><span class="token punctuation">)</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;=</span> count<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>`,44)])))}}),y={__name:"index",setup(p){return(s,t)=>{const n=i;return a(),l(n,null,{default:u(()=>[k(r(d),{id:"markdown"})]),_:1})}}};export{y as default};
