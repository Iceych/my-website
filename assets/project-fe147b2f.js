import{d as o,o as a,c as e,f as c,g as l,w as u,b as k,h as i,i as r}from"./index-9362ae99.js";const d={class:"markdown-body"},m=o({__name:"项目规范",setup(t,{expose:s}){return s({frontmatter:{},excerpt:void 0}),(p,n)=>(a(),e("div",d,n[0]||(n[0]=[c(`<h1 id="%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83" tabindex="-1">项目规范</h1><p>为了提高代码的可维护性，为了回避错误、小纠结和反模式，本文对较规范的代码进行解析。</p><h2 id="%E5%BF%85%E8%A6%81%E5%8E%9F%E5%88%99" tabindex="-1">必要原则</h2><ul><li>注释。变量（data、computed内变量等）、函数方法必须写注释。</li><li>命名大小写 <ul><li><code class="">camelCase</code>：（主要使用）：变量名、函数名</li><li><code class="">PascalCase</code>：组件文件名、<code class="">js</code>的<code class="">Class</code>。</li><li><code class="">kebab-case</code>：css的类名、<code class="">jsx</code>内调用组件、单个<code class="">js</code>文件名、页面名称。</li><li>下划线命名：<code class="">static</code>内的图片。</li></ul></li><li>内容尽量拆分。页面级组件只引用其他组件，不直接写<code class="">&lt;div&gt;&lt;/div&gt;</code>；与组件关系不大的内容，拆分到对应的文件下，文件结构具体见下文。</li></ul><h2 id="%E5%A6%82%E4%BD%95%E6%8B%86%E5%88%86%E7%9B%AE%E5%BD%95" tabindex="-1">如何拆分目录</h2><pre class="language-js"><code class="language-js"><span class="token operator">|</span><span class="token operator">--</span> configs              # 配置文件目录
  <span class="token operator">|</span><span class="token operator">--</span> config<span class="token punctuation">.</span>release<span class="token punctuation">.</span>js  # 正式配置信息
  <span class="token operator">|</span><span class="token operator">--</span> config<span class="token punctuation">.</span>beta<span class="token punctuation">.</span>js     # 公测配置信息
  <span class="token operator">|</span><span class="token operator">--</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>js      # 内测配置信息
  <span class="token operator">|</span><span class="token operator">--</span> config<span class="token punctuation">.</span>default<span class="token punctuation">.</span>js  # 默认配置信息
  <span class="token operator">|</span><span class="token operator">--</span> track<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js    # 埋点配置信息
<span class="token operator">|</span><span class="token operator">--</span> mock                 # 本地mock数据目录
  <span class="token operator">|</span><span class="token operator">--</span> index<span class="token punctuation">.</span>js           # mock数据
<span class="token operator">|</span><span class="token operator">--</span> src
  <span class="token operator">|</span><span class="token operator">--</span> components       # <span class="token function">全局组件</span><span class="token punctuation">(</span>使用次数<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token operator">|</span><span class="token operator">--</span> PascalCase<span class="token punctuation">.</span>vue      # 单个全局组件
    <span class="token operator">|</span><span class="token operator">--</span> <span class="token operator">...</span>
  <span class="token operator">|</span><span class="token operator">--</span> model            # model
    <span class="token operator">|</span><span class="token operator">--</span> kebab<span class="token operator">-</span><span class="token keyword">case</span><span class="token punctuation">.</span>model<span class="token punctuation">.</span>js        # 单个model文件
    <span class="token operator">|</span><span class="token operator">--</span> <span class="token operator">...</span>
  <span class="token operator">|</span><span class="token operator">--</span> services         # 接口请求
    <span class="token operator">|</span><span class="token operator">--</span> kebab<span class="token operator">-</span><span class="token keyword">case</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span>js         # 单个接口文件
    <span class="token operator">|</span><span class="token operator">--</span> <span class="token operator">...</span>
  <span class="token operator">|</span><span class="token operator">--</span> store            # vuex
  <span class="token operator">|</span><span class="token operator">--</span> utils            # 工具
    <span class="token operator">|</span><span class="token operator">--</span> kebab<span class="token operator">-</span><span class="token keyword">case</span><span class="token punctuation">.</span>js        # 单个util文件
    <span class="token operator">|</span><span class="token operator">--</span> <span class="token operator">...</span>
  <span class="token operator">|</span><span class="token operator">--</span> pages            # 页面
    <span class="token operator">|</span><span class="token operator">--</span> kebab<span class="token operator">-</span><span class="token keyword">case</span>        # 页面名称
      <span class="token operator">|</span><span class="token operator">--</span> components      # 局部组件
        <span class="token operator">|</span><span class="token operator">--</span> PascalCase<span class="token punctuation">.</span>vue      # 单个局部组件
        <span class="token operator">|</span><span class="token operator">--</span> <span class="token operator">...</span>
      <span class="token operator">|</span><span class="token operator">--</span> index<span class="token punctuation">.</span>vue       # 页面级组件
  <span class="token operator">|</span><span class="token operator">--</span> main<span class="token punctuation">.</span>js
<span class="token operator">|</span><span class="token operator">--</span> <span class="token keyword">static</span>               # 静态文件
  <span class="token operator">|</span><span class="token operator">--</span> images
    <span class="token operator">|</span><span class="token operator">--</span> under_score_case<span class="token punctuation">.</span>png      # 图片文件
    <span class="token operator">|</span><span class="token operator">--</span> <span class="token operator">...</span>
<span class="token operator">|</span><span class="token operator">--</span> <span class="token punctuation">.</span>env<span class="token punctuation">.</span>dev             # 环境变量和模式
<span class="token operator">|</span><span class="token operator">--</span> <span class="token punctuation">.</span>gitlab<span class="token operator">-</span>ci<span class="token punctuation">.</span>yml       # gitlab打包脚本
<span class="token operator">|</span><span class="token operator">--</span> vite<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js       # vite配置文件
<span class="token operator">|</span><span class="token operator">--</span> yapi<span class="token punctuation">.</span>json            # 接口文档
<span class="token operator">|</span><span class="token operator">--</span> <span class="token operator">...</span>
</code></pre><h2 id="%E5%A6%82%E4%BD%95%E5%91%BD%E5%90%8D" tabindex="-1">如何命名</h2><h3 id="js-%E5%91%BD%E5%90%8D" tabindex="-1">js 命名</h3><ul><li><p>变量必须采用<code class="">camelCase</code>。</p></li><li><p>常量命名应该使用全大写格式，并用下划线分割</p></li><li><p>函数名应该为<code class="">动宾结构</code>，<code class="">camelCase</code>命名。函数常见的动词前缀：</p><table><thead><tr><th>动词</th><th>含义</th><th>返回值</th></tr></thead><tbody><tr><td>can</td><td>判断是否可执行某个动作(权限)</td><td>函数返回一个布尔值。true：可执行；false：不可执行</td></tr><tr><td>has</td><td>判断是否含有某个值</td><td>函数返回一个布尔值。true：含有此值；false：不含有此值</td></tr><tr><td>is</td><td>判断是否为某个值</td><td>函数返回一个布尔值。true：为某个值；false：不为某个值</td></tr><tr><td>get</td><td>获取某个值</td><td>函数返回一个非布尔值</td></tr><tr><td>set</td><td>设置某个值</td><td>无返回值、返回是否设置成功或者返回链式对象</td></tr><tr><td>load</td><td>加载某些数据</td><td>无返回值或者返回是否加载完成的结果</td></tr><tr><td>init</td><td>初始化</td><td>无返回值或者返回初始化的结果</td></tr><tr><td>handle</td><td>事件处理</td><td>无返回值或者返回事件处理的结果</td></tr></tbody></table></li><li><p>类名使用<code class="">PascalCase</code>，属性和方法使用<code class="">camelCase</code>。</p></li><li><p>变量名称可参考antd、微信小程序等。<a href="#%E5%B8%B8%E8%A7%81%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E5%88%97%E8%A1%A8">常见变量命名列表</a></p></li></ul><h3 id="css-%E5%91%BD%E5%90%8D" tabindex="-1">css 命名</h3><ul><li>变量名必须采用短线分隔。</li><li><code class="">class</code>名应该语义化。</li></ul><h3 id="%E6%96%87%E4%BB%B6%E5%90%8D%E5%91%BD%E5%90%8D" tabindex="-1">文件名命名</h3><ul><li>参考 <a href="#%E5%A6%82%E4%BD%95%E6%8B%86%E5%88%86%E7%9B%AE%E5%BD%95">如何拆分目录</a></li></ul><h2 id="%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9%E9%9C%80%E8%A6%81%E6%B3%A8%E9%87%8A" tabindex="-1">哪些地方需要注释</h2><p>一块代码逻辑如果你站在一个陌生人的角度去看,第一遍看不懂的话,就需要添加注释了。下面几个地方，务必写好注释。</p><ul><li>变量。特别是<code class="">data</code>、<code class="">computed</code>里面的变量，以及函数内部的一些关键状态。</li><li>函数。至少应该写明该函数的作用，函数内的关键流程也应该写明注释。</li><li>页面级组件，<code class="">jsx</code>的各个模块。</li></ul><h2 id="%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81-vue-%E7%BB%93%E6%9E%84%E4%B8%80%E8%87%B4" tabindex="-1">如何保证 vue 结构一致</h2><ul><li><code class="">vue</code>组件选项遵循如下顺序。<a href="https://v2.cn.vuejs.org/v2/style-guide/#%E7%BB%84%E4%BB%B6-%E5%AE%9E%E4%BE%8B%E7%9A%84%E9%80%89%E9%A1%B9%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%8E%A8%E8%8D%90">详细规则</a>。</li></ul><pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><ul><li><code class="">vue</code>模版中，属性遵循如下顺序。组件属性 <code class="">v-</code> 开头、<code class="">:</code> 开头、<code class="">@</code> 开头等不要交叉放置，按顺序放置，可以把重要的放在上面，类似<code class="">ref</code>、<code class="">class</code>等不重要的可放在下面。</li></ul><pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>my<span class="token operator">-</span>component
  v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;showCom&quot;</span>
  v<span class="token operator">-</span>track<span class="token operator">=</span><span class="token string">&quot;clickTrack&quot;</span>
  <span class="token operator">:</span>my<span class="token operator">-</span>prop1<span class="token operator">=</span><span class="token string">&quot;value1&quot;</span>
  <span class="token operator">:</span>my<span class="token operator">-</span>prop2<span class="token operator">=</span><span class="token string">&quot;value2&quot;</span>
  @click<span class="token operator">=</span><span class="token string">&quot;clickMyCom&quot;</span>
  @show<span class="token operator">=</span><span class="token string">&quot;showMyCom&quot;</span>
  ref<span class="token operator">=</span><span class="token string">&quot;my-com&quot;</span>
  <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;my-com&quot;</span>
<span class="token operator">/</span><span class="token operator">&gt;</span>

</code></pre><ul><li><code class="">import</code>导入顺序保持一致，同类型的放到一起。</li></ul><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> getEnv <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@comp/basic-lib/dist/lib/system&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> nativeBridge <span class="token keyword">from</span> <span class="token string">&quot;@comp/basic-lib/dist/lib/nativeBridge&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> MyComponent1 <span class="token keyword">from</span> <span class="token string">&quot;@/components/MyComponent1&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> MyComponent2 <span class="token keyword">from</span> <span class="token string">&quot;@/components/MyComponent2&quot;</span><span class="token punctuation">;</span>
</code></pre><h2 id="%E5%A6%82%E4%BD%95%E5%86%99%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82" tabindex="-1">如何写网络请求</h2><ul><li>在 <code class="">services</code>目录下创建接口文件。文件命名使用<code class="">kebab-case</code>，遵循规则：<code class="">service名称 + .service.js</code>。</li></ul><pre class="language-js"><code class="language-js"><span class="token comment">// services 目录示例</span>
<span class="token operator">|</span><span class="token operator">--</span> services
  <span class="token operator">|</span><span class="token operator">--</span> app<span class="token operator">-</span>active<span class="token punctuation">.</span>service<span class="token punctuation">.</span>js
  <span class="token operator">|</span><span class="token operator">--</span> comp<span class="token punctuation">.</span>service<span class="token punctuation">.</span>js
</code></pre><ul><li>单个<code class="">service</code>文件引入<code class="">base.service.js</code>提供的装饰器，添加接口请求方法，导出一个Class。</li></ul><pre class="language-js"><code class="language-js"><span class="token comment">// 单个文件示例</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BaseService<span class="token punctuation">,</span> HttpHost<span class="token punctuation">,</span> HttpRejectHandle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./base.service&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>errorCode <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

@<span class="token function">HttpRejectHandle</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>
@<span class="token function">HttpHost</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_APIURL</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">CustomApi</span> <span class="token keyword">extends</span> <span class="token class-name">BaseService</span> <span class="token punctuation">{</span>
  <span class="token comment">// 文件上传-支持格式.jpg|.png|.gif|.bmp|.pdf|.txt</span>
  <span class="token function">upload</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postFormDataService</span><span class="token punctuation">(</span><span class="token string">&quot;/upload/image&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">CustomApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><ul><li>页面调用<code class="">$commonApi</code>对象方法，请求接口。</li></ul><pre class="language-js"><code class="language-js"><span class="token function">uploadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 上传图片，$commonApi 属性用小驼峰式的service文件名</span>
  <span class="token keyword">return</span> $commonApi<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><h2 id="%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0mock%E6%95%B0%E6%8D%AE" tabindex="-1">如何添加本地mock数据</h2><ul><li>项目根目录，创建<code class="">mock</code>文件夹，<code class="">index.js</code>文件。</li><li>导出一个<code class="">mock</code>数据对象。</li></ul><pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">commonApi</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;/mm/dataList/listInfo&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">appActive</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;/AppoperationApi/Modules/GetModuleContent&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1212001</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="%E9%9D%9E%E4%B8%BB%E8%A6%81%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E5%BA%94%E8%AF%A5%E5%86%99%E5%9C%A8%E5%93%AA" tabindex="-1">非主要逻辑函数应该写在哪</h2><p>开发者在开发组件时，关心的应该是页面的主要流程和逻辑，比如：created生命周期中，调了设置分享的方法；loadData时，拿到几个接口数据后调用一个方法合成了一个对象。至于如何设置分享，如何处理数据，这些不应该在页面级别的组件展示，页面级组件只需要体现页面的关键逻辑。单纯的数据处理、设置导航条、设置分享等等，应该放到utils目录下。</p><ul><li><code class="">utils</code>目录下，创建一个文件。文件命名使用<code class="">kebab-case</code>。</li></ul><pre class="language-js"><code class="language-js"><span class="token operator">|</span><span class="token operator">--</span> utils
  <span class="token operator">|</span><span class="token operator">--</span> filters<span class="token punctuation">.</span>js
  <span class="token operator">|</span><span class="token operator">--</span> format<span class="token punctuation">.</span>js    # 数据转换
</code></pre><ul><li>单个<code class="">utils</code>文件,导出一个对象或函数。</li></ul><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">homeData</span><span class="token punctuation">(</span><span class="token parameter">configList<span class="token punctuation">,</span> dataList</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 将 模块配置数据 和 内容数据 合并</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  homeData<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><ul><li>页面中使用<code class="">$tools.</code>对象方法，使用函数。</li></ul><pre class="language-js"><code class="language-js">$tools<span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">homeData</span><span class="token punctuation">(</span>configList<span class="token punctuation">,</span> dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="%E5%A6%82%E4%BD%95%E5%86%99readme.md%E6%96%87%E4%BB%B6" tabindex="-1">如何写README.md文件</h2><p><code class="">README.md</code>文件，至少应该写明项目的需求地址以及各个环节的对应人，方便后续的交接。示例：</p><pre class="language-md"><code class="language-md"><span class="token title important"><span class="token punctuation">##</span> 项目参与者</span>

<span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> 序号 </span><span class="token punctuation">|</span><span class="token table-header important"> 职务     </span><span class="token punctuation">|</span><span class="token table-header important"> 名称 </span><span class="token punctuation">|</span><span class="token table-header important"> 备注             </span><span class="token punctuation">|</span>
</span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">----</span> <span class="token punctuation">|</span> <span class="token punctuation">--------</span> <span class="token punctuation">|</span> <span class="token punctuation">----</span> <span class="token punctuation">|</span> <span class="token punctuation">----------------</span> <span class="token punctuation">|</span>
</span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 1    </span><span class="token punctuation">|</span><span class="token table-data"> 需求     </span><span class="token punctuation">|</span><span class="token table-data"> xx   </span><span class="token punctuation">|</span><span class="token table-data"> 需求地址：xxx    </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 2    </span><span class="token punctuation">|</span><span class="token table-data"> PM       </span><span class="token punctuation">|</span><span class="token table-data"> xx   </span><span class="token punctuation">|</span><span class="token table-data"> 沟通各部门       </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 3    </span><span class="token punctuation">|</span><span class="token table-data"> UI       </span><span class="token punctuation">|</span><span class="token table-data"> xx   </span><span class="token punctuation">|</span><span class="token table-data"> 设计稿：xxx      </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 4    </span><span class="token punctuation">|</span><span class="token table-data"> UI       </span><span class="token punctuation">|</span><span class="token table-data"> xx   </span><span class="token punctuation">|</span><span class="token table-data"> 设计稿：xxx      </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 6    </span><span class="token punctuation">|</span><span class="token table-data"> 接口     </span><span class="token punctuation">|</span><span class="token table-data"> xx   </span><span class="token punctuation">|</span><span class="token table-data"> 接口服务         </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 7    </span><span class="token punctuation">|</span><span class="token table-data"> 前端开发 </span><span class="token punctuation">|</span><span class="token table-data"> xx   </span><span class="token punctuation">|</span><span class="token table-data"> 前端静态页面开发 </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 8    </span><span class="token punctuation">|</span><span class="token table-data"> 前端开发 </span><span class="token punctuation">|</span><span class="token table-data"> xx   </span><span class="token punctuation">|</span><span class="token table-data"> 前端页面逻辑开发 </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 9    </span><span class="token punctuation">|</span><span class="token table-data"> 测试     </span><span class="token punctuation">|</span><span class="token table-data"> xx   </span><span class="token punctuation">|</span>
<span class="token punctuation">|</span><span class="token table-data"> 10   </span><span class="token punctuation">|</span><span class="token table-data"> 测试     </span><span class="token punctuation">|</span><span class="token table-data"> xx   </span><span class="token punctuation">|</span>
</span></span></code></pre><h2 id="%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91v-if%E4%BD%BF%E7%94%A8" tabindex="-1">如何减少<code class="">v-if</code>使用</h2><ul><li><code class="">jsx</code>中，使用动态组件代替按条件渲染。</li></ul><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- 推荐 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 不推荐 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>components-1</span> <span class="token attr-name">v-if</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>components-2</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>components-3</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><ul><li><code class="">js</code>中使用<code class="">map</code>或者<code class="">object</code>替代。</li></ul><pre class="language-js"><code class="language-js"><span class="token comment">// 推荐</span>
<span class="token keyword">const</span> active <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">ios</span><span class="token operator">:</span> activeIOS<span class="token punctuation">,</span>
  <span class="token literal-property property">android</span><span class="token operator">:</span> activeAndroid<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
active<span class="token punctuation">[</span>system<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 不推荐</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isIOS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">activeIOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isAndroid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">activeAndroid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="mixin%E8%83%BD%E4%B8%8D%E8%83%BD%E7%94%A8" tabindex="-1">mixin能不能用</h2><p>目前项目不推荐使用mixin。混入 (mixin) 提供了一种非常灵活的方式，来分发Vue组件中的可复用功能。一个混入对象可以包含任意组件选项。正是因为这种灵活性，一个合格的mixin必须是通用的，应该是与当前页面的业务场景是解偶的。如何封装一个mixin就成了一个高难度的事情。当项目到了一定的复杂程度，发现现有的某个mixin不支持某个场景时，写得糟糕的mixin将难以修改，当你做出修改时很可能影响之前的功能。看了很多项目，对于mixin的使用，主要是对某些不重要的业务代码进行拆分，很少用到mixin的可复用性。而这些不重要的代码，比如接口数据处理、数据转换等等，现在有专门的文件进行拆分，mixin不再建议使用。</p><h2 id="async%2Fawait-%E4%B8%8E-new-promise().then-%E8%83%BD%E4%B8%8D%E8%83%BD%E6%B7%B7%E7%94%A8" tabindex="-1"><code class="">async/await</code> 与 <code class="">new Promise().then</code> 能不能混用</h2><p>在面试考题中，经常遇到面试官用async/await、new Promise().then混用的例子，这是很好的面试题，但是不应该出现在项目代码里。这种混着用的写法，再加上函数中穿插着return，会使后续的维护或者重构变得困难。既然有了async/await,最好就不要再使用then了。</p><h2 id="%E5%A6%82%E4%BD%95%E5%A2%9E%E5%BC%BA%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7" tabindex="-1">如何增强代码可读性</h2><ul><li>变量语义化，类似：<code class="">test</code>、<code class="">a</code>这种毫无意义的变量名禁止使用。</li><li>不直接使用接口给的枚举值，做好映射关系。</li></ul><pre class="language-js"><code class="language-js"><span class="token comment">// 不推荐</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  xxx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 推荐</span>
<span class="token keyword">const</span> dataType <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> dataType<span class="token punctuation">.</span>type1<span class="token punctuation">)</span><span class="token punctuation">{</span>
  xxx
<span class="token punctuation">}</span>
</code></pre><h2 id="%E7%BB%84%E4%BB%B6%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83" tabindex="-1">组件编写规范</h2><h3 id="%E9%80%9A%E7%94%A8%E8%A7%84%E8%8C%83" tabindex="-1">通用规范</h3><ul><li>组件命名遵循<code class="">PascalCase</code>。</li><li>组件调用使用<code class="">kebab-case</code>字符串。</li><li>组件名尽量为多个单词，避免与原生标签冲突。</li><li>组件命名、函数命名、<code class="">css class</code>命名，不可随便命名，遇到纠结的，可参考其他开源项目，如：<code class="">antd</code>、<code class="">微信小程序</code>等。</li><li><code class="">props</code>至少声明对应的类型。</li><li><code class="">data</code>里面的数据，必须添加注释，命名遵循<code class="">camelCase</code>。</li><li>除了<code class="">loadData()</code>、<code class="">reload()</code>、<code class="">init()</code>等常用命名函数，其他函数必须添加注释说明函数的作用，在函数执行的关键点，也需添加注释说明。</li><li>不可接受内容的标签或组件，使用自闭合，表示它们不仅没有内容，而且刻意没有内容。例如：<code class="">&lt;nav /&gt;</code>、<code class="">&lt;image /&gt;</code>。可以接受内容的标签不使用自闭合。例如：<code class="">&lt;div&gt;&lt;/div&gt;</code>。</li><li>用<code class="">:</code>表示<code class="">v-bind:</code>、用<code class="">@</code>表示<code class="">v-on:</code>。</li><li>尽量少使用<code class="">setTimeout</code>，使用<code class="">$nextTick()</code>替代。</li><li>减少<code class="">v-if</code>，使用动态组件、<code class="">map</code>、对象等代替。</li><li>枚举值语义化，禁止使用<code class="">0、1、2</code>表示。示例：页面状态使用<code class="">loading、error、complete</code>。</li><li>减少<code class="">methods</code>内函数，尽量使用中间件、函数库等方法。</li><li>组件埋点以及跳转，使用中间件的自定义指令。<code class="">v-router-push=&quot;url&quot;</code>、<code class="">v-track=&quot;{...}&quot;</code>。</li></ul><h3 id="%E9%A1%B5%E9%9D%A2%E7%BA%A7%E7%BB%84%E4%BB%B6%E8%A7%84%E8%8C%83" tabindex="-1">页面级组件规范</h3><ul><li>页面级组件内，只使用封装过的组件，禁止使用<code class="">&lt;div&gt;&lt;/div&gt;</code>。</li><li><code class="">&lt;template&gt;</code>中，注释每个模块的作用。</li><li>示例：</li></ul><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pages-layout</span> <span class="token attr-name">:loadData</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loadData<span class="token punctuation">&quot;</span></span> <span class="token attr-name">storeKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>home.index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 顶部区域 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>top-banner</span> <span class="token punctuation">/&gt;</span></span>
      <span class="token comment">&lt;!-- 吸顶导航 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sticky-nav</span> <span class="token attr-name">:navList</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>layoutData<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:anchor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anchor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stickyNav<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token comment">&lt;!-- 榜单列表 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data-list</span>
        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item, i) in layoutData<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>i<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:dataList</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anchor<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span>
      <span class="token comment">&lt;!-- 风险提示 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>risk-warning</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pages-layout</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> mixin <span class="token keyword">from</span> <span class="token string">&quot;@comp/mixin-layout&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> TopBanner <span class="token keyword">from</span> <span class="token string">&quot;./components/TopBanner.vue&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> StickyNav <span class="token keyword">from</span> <span class="token string">&quot;./components/StickyNav.vue&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> FundDataList <span class="token keyword">from</span> <span class="token string">&quot;./components/FundDataList.vue&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> RiskWarning <span class="token keyword">from</span> <span class="token string">&quot;./components/RiskWarning.vue&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      TopBanner<span class="token punctuation">,</span>
      StickyNav<span class="token punctuation">,</span>
      FundDataList<span class="token punctuation">,</span>
      RiskWarning<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">anchor</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 锚点ref数组</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>anchor <span class="token operator">&amp;&amp;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stickyNav
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取锚点数组，初始化导航栏</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>anchor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>anchor<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stickyNav<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">async</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 配置的榜单类型列表</span>
        <span class="token keyword">const</span> configList <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$services<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">getConfigList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 榜单类型的字符串，用于请求榜单需求</span>
        <span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$utils<span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">homeTypes</span><span class="token punctuation">(</span>configList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 各个类型榜单的详情列表</span>
        <span class="token keyword">const</span> dataList <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$services<span class="token punctuation">.</span>common<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$utils<span class="token punctuation">.</span>format<span class="token punctuation">.</span><span class="token function">homeData</span><span class="token punctuation">(</span>configList<span class="token punctuation">,</span> dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><h3 id="%E5%B1%80%E9%83%A8%E7%BB%84%E4%BB%B6%E8%A7%84%E8%8C%83" tabindex="-1">局部组件规范</h3><ul><li>示例：</li></ul><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:stickyOffset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mix_system.customNavHeight<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-meta<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item, i) in navList<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>i<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clickNav(i)<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">v-track</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{eventName:$getConfigs(&#39;track.navClick&#39;),Position: i}<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">&gt;</span></span>
        ...
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">navList</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>
      <span class="token literal-property property">anchor</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">hoverIndex</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 当前 hover 的 index</span>
        <span class="token literal-property property">appearElMap</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 节点是否appear,key 为锚点的 index，value 为是否显示</span>
        <span class="token literal-property property">scrollActive</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 当前是否在滚动</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 更新节点appear map、添加事件</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">refItem<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> item <span class="token operator">=</span> refItem<span class="token punctuation">.</span>$el<span class="token punctuation">;</span>
            <span class="token comment">// 初始化appear节点map</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>appearElMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appearElMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 为 ref 添加事件</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEvent</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 添加appear事件</span>
        el<span class="token punctuation">.</span><span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token string">&#39;appear&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 触发appear事件，修改 appearElMap 对应的 index 值</span>
          <span class="token operator">...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        el<span class="token punctuation">.</span><span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token string">&#39;disappear&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 触发 disappear 事件，修改 appearElMap 对应的 index 值</span>
          <span class="token operator">...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre>`,65)])))}}),y={__name:"project",setup(t){return(s,p)=>{const n=r;return a(),l(n,null,{default:u(()=>[k(i(m),{id:"markdown"})]),_:1})}}};export{y as default};
