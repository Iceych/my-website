import{d as o,o as s,c as e,f as c,g as l,w as u,b as k,h as i,i as r}from"./index-9362ae99.js";const B={class:"markdown-body"},E=o({__name:"组件分类",setup(t,{expose:a}){return a({frontmatter:{},excerpt:void 0}),(p,n)=>(s(),e("div",B,n[0]||(n[0]=[c(`<h1 id="%E7%BB%84%E4%BB%B6%E5%88%86%E7%B1%BB" tabindex="-1">组件分类</h1><p>组件化开发为的前端开发带来了许多的便利，组件的功能包括：代码复用，组织代码， 便于测试，容易重构等等。根据不同纬度，对组件进行分类，可以更好的拆分和抽象。</p><h2 id="%E6%8C%89%E7%BB%84%E4%BB%B6%E6%B3%A8%E5%86%8C%E6%96%B9%E5%BC%8F%E5%88%86%E7%B1%BB%EF%BC%9A%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6%E5%92%8C%E5%B1%80%E9%83%A8%E7%BB%84%E4%BB%B6" tabindex="-1">按组件注册方式分类：全局组件和局部组件</h2><h3 id="%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6" tabindex="-1">全局组件</h3><p>一些频繁需要用到的组件，可以全局注册。比如<code class="">页面的导航栏组件</code>、<code class="">toast组件</code>、<code class="">message组件</code>等等。</p><pre class="language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;my-component-name&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><h3 id="%E5%B1%80%E9%83%A8%E7%BB%84%E4%BB%B6" tabindex="-1">局部组件</h3><p>既然有全局组件，全局注册后，每个地方都能使用，为什么还要局部注册呢？一般情况下的组件都应该是局部组件，这样会极大的减少构建应用后的代码体积。使用频率低的组件，应该只在使用处注册。</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&quot;./ComponentA.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    ComponentA<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="%E6%8C%89%E7%BB%84%E4%BB%B6%E6%9C%89%E6%97%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8A%B6%E6%80%81%E5%88%86%E7%B1%BB%EF%BC%9A%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E5%92%8C%E6%99%AE%E9%80%9A%E7%BB%84%E4%BB%B6" tabindex="-1">按组件有无自己的状态分类：函数式组件和普通组件</h2><p><code class="">Vue</code>提供<code class="">functional</code>选项，让组件变为无状态（没有<code class="">data</code>）、无实例（没有<code class="">this</code>上下文）的函数化组件。函数式组件并不会像普通组件那样有实例化组件的过程，因此包括组件的生命周期，组件的数据管理这些过程都没有，它只会原封不动的接收传递给组件的数据做处理，并渲染需要的内容。因此函数组件，作为纯粹的函数可以大大降低渲染的开销。</p><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">functional</span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><h2 id="%E6%8C%89%E7%BB%84%E4%BB%B6%E6%98%AF%E5%90%A6%E5%8A%A8%E6%80%81%E5%88%86%E7%B1%BB%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E5%92%8C%E6%99%AE%E9%80%9A%E7%BB%84%E4%BB%B6" tabindex="-1">按组件是否动态分类：动态组件和普通组件</h2><p>使用动态组件，在不同组件之间进行动态切换是非常有用的，比<code class="">v-if</code>的写法更加优雅、性能更好。</p><pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>component v<span class="token operator">-</span>bind<span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">&quot;currentTabComponent&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> DynamicComponent1 <span class="token keyword">from</span> <span class="token string">&quot;./components/DynamicComponent1&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> DynamicComponent2 <span class="token keyword">from</span> <span class="token string">&quot;./components/DynamicComponent2&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    DynamicComponent1<span class="token punctuation">,</span>
    DynamicComponent2<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">currentTabComponent</span><span class="token operator">:</span> <span class="token string">&quot;DynamicComponent1&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>currentTabComponent <span class="token operator">=</span> <span class="token string">&quot;DynamicComponent&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h2 id="%E6%8C%89%E7%BB%84%E4%BB%B6%E6%98%AF%E5%90%A6%E5%BC%82%E6%AD%A5%E5%88%86%E7%B1%BB%EF%BC%9A%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E5%92%8C%E6%99%AE%E9%80%9A%E7%BB%84%E4%BB%B6" tabindex="-1">按组件是否异步分类：异步组件和普通组件</h2><p>在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，<code class="">Vue</code>允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。<code class="">Vue</code> 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。使用最多的是在<code class="">Vue Router</code>里使用，异步组件结合<code class="">Webpack</code>的代码分割功能，可以轻松实现路由组件的懒加载。</p><h2 id="%E6%8C%89%E7%BB%84%E4%BB%B6%E6%98%AF%E5%90%A6%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E5%88%86%E7%B1%BB%EF%BC%9A%E9%80%92%E5%BD%92%E7%BB%84%E4%BB%B6%E5%92%8C%E6%99%AE%E9%80%9A%E7%BB%84%E4%BB%B6" tabindex="-1">按组件是否循环引用分类：递归组件和普通组件</h2><p><code class="">Vue</code>中，组件是可以在它们自己的模板中调用自身的，可以使用写递归函数的方法写组件。例如树组件、侧边栏组件等。</p><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ item.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>recursive-component</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.children<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.children<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;RecursiveComponent&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><h2 id="%E6%8C%89%E7%BB%84%E4%BB%B6%E6%8E%A5%E6%94%B6%E4%B8%BB%E4%BD%93%E5%86%85%E5%AE%B9%E6%96%B9%E5%BC%8F%E5%88%86%E7%B1%BB%EF%BC%9A%E7%BB%84%E5%90%88%E5%9E%8B%E7%BB%84%E4%BB%B6%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%9E%8B%E7%BB%84%E4%BB%B6" tabindex="-1">按组件接收主体内容方式分类：组合型组件与配置型组件</h2><h3 id="%E7%BB%84%E5%90%88%E5%9E%8B%E7%BB%84%E4%BB%B6" tabindex="-1">组合型组件</h3><p>组合型组件以<code class="">JSX</code>为主体，通过组件间的嵌套组合描述业务逻辑。组合型组件最具代表性的实践是<code class="">Ant Design</code>，整个组件库设计严格遵循组合型优先原则，为同一组件的不同位面分别提供组合型结构，使其在拓展性和易用性上都达到了很高的水准。</p><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-select</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-select-option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jack<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-select-option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-select-option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lucy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lucy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-select-option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-select</span>
<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-select</span><span class="token punctuation">&gt;</span></span>
</code></pre><h3 id="%E9%85%8D%E7%BD%AE%E5%9E%8B%E7%BB%84%E4%BB%B6" tabindex="-1">配置型组件</h3><p>配置型组件通过props传递数据结构，组件内部根据预先设定好的逻辑渲染视图。</p><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span>
  <span class="token attr-name">:option</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[
  {key:&#39;jack&#39;,value:&#39;jack&#39;,label:&#39;Jack&#39;},
  {key:&#39;lucy&#39;,value:&#39;lucy&#39;,label:&#39;Lucy&#39;},
]<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><h2 id="%E6%80%BB%E7%BB%93" tabindex="-1">总结</h2><table><thead><tr><th>纬度</th><th>分类1</th><th>分类2</th></tr></thead><tbody><tr><td>注册方式</td><td>全局组件</td><td>局部组件</td></tr><tr><td>有无自己的状态</td><td>函数式组件</td><td>普通组件</td></tr><tr><td>是否动态</td><td>动态组件</td><td>普通组件</td></tr><tr><td>是否异步</td><td>异步组件</td><td>普通组件</td></tr><tr><td>是否循环引用</td><td>递归组件</td><td>普通组件</td></tr><tr><td>接收渲染内容方式</td><td>组合型组件</td><td>配置型组件</td></tr></tbody></table>`,29)])))}}),g={__name:"component",setup(t){return(a,p)=>{const n=r;return s(),l(n,null,{default:u(()=>[k(i(E),{id:"markdown"})]),_:1})}}};export{g as default};
